/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EmployeeManagementSystem {
  export type EmployeeStruct = {
    name: string;
    role: BigNumberish;
    isEmployed: boolean;
    employeeAddress: AddressLike;
  };

  export type EmployeeStructOutput = [
    name: string,
    role: bigint,
    isEmployed: boolean,
    employeeAddress: string
  ] & {
    name: string;
    role: bigint;
    isEmployed: boolean;
    employeeAddress: string;
  };
}

export interface EmployeeManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "canAccessGarage"
      | "getAllEmployees"
      | "getEmployeeByAddress"
      | "toggleEmploymentStatus"
      | "updateEmployeeData"
      | "updateEmployeeRole"
      | "updateEmployees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessGarage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleEmploymentStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeData",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployees",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessGarage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleEmploymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployees",
    data: BytesLike
  ): Result;
}

export interface EmployeeManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): EmployeeManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: EmployeeManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [employeeAddress: AddressLike, name: string, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  canAccessGarage: TypedContractMethod<
    [employeeAddress: AddressLike],
    [boolean],
    "view"
  >;

  getAllEmployees: TypedContractMethod<
    [],
    [EmployeeManagementSystem.EmployeeStructOutput[]],
    "view"
  >;

  getEmployeeByAddress: TypedContractMethod<
    [employeeAddress: AddressLike],
    [EmployeeManagementSystem.EmployeeStructOutput],
    "view"
  >;

  toggleEmploymentStatus: TypedContractMethod<
    [employeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEmployeeData: TypedContractMethod<
    [employeeAddress: AddressLike, role: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;

  updateEmployeeRole: TypedContractMethod<
    [employeeAddress: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEmployees: TypedContractMethod<
    [employeeAddress: AddressLike, name: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [employeeAddress: AddressLike, name: string, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canAccessGarage"
  ): TypedContractMethod<[employeeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<
    [],
    [EmployeeManagementSystem.EmployeeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeeByAddress"
  ): TypedContractMethod<
    [employeeAddress: AddressLike],
    [EmployeeManagementSystem.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "toggleEmploymentStatus"
  ): TypedContractMethod<[employeeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEmployeeData"
  ): TypedContractMethod<
    [employeeAddress: AddressLike, role: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEmployeeRole"
  ): TypedContractMethod<
    [employeeAddress: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEmployees"
  ): TypedContractMethod<
    [employeeAddress: AddressLike, name: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
